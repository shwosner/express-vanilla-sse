{"version":3,"sources":["MessageForm.js","AlwaysScrollToBottom.js","Message.js","Messages.js","NameForm.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["MessageForm","username","useState","message","setMessage","toast","useToast","isSending","setIsSending","onSubmit","e","preventDefault","axios","post","text","then","res","catch","error","console","log","title","description","status","duration","isClosable","finally","autoComplete","direction","bg","mt","name","placeholder","onChange","target","value","border","autoFocus","colorScheme","aria-label","fontSize","icon","type","disabled","isLoading","AlwaysScrollToBottom","elementRef","useRef","useEffect","current","scrollIntoView","ref","Message","isYou","display","justifyItems","templateColumns","templateRows","w","px","py","borderRadius","borderTopLeftRadius","borderTopRightRadius","position","_after","content","width","height","borderStyle","borderWidth","borderColor","top","left","right","fontWeight","justifySelf","colSpan","color","mb","textAlign","wordBreak","alignSelf","Date","timestamp","toLocaleTimeString","Messages","messages","setMessages","hasStreamError","setHasStreamError","stream","connectToStream","window","EventSource","onopen","addEventListener","event","data","JSON","parse","onmessage","onerror","currentTarget","readyState","close","length","map","index","as","ml","onClick","variant","dayjs","extend","relativeTime","NameForm","setUsername","newUsername","setNewUsername","isEditing","setIsEditing","toggleEditing","inputRef","focus","handleSubmit","localStorage","setItem","size","onBlur","style","cursor","pb","App","localName","getItem","theme","minH","m","src","mr","maxW","gridTemplateRows","p","overflow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88ea932c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Input, Stack, IconButton, useToast } from \"@chakra-ui/react\";\nimport { BiSend } from \"react-icons/bi\";\nimport axios from \"axios\";\n\nexport default function MessageForm({ username }) {\n  const [message, setMessage] = useState(\"\");\n  const toast = useToast();\n  const [isSending, setIsSending] = useState(false);\n  // useEffect(() => {\n  //   console.log(\"message :>> \", message);\n  // }, [message]);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsSending(true);\n    if (!message) return;\n    axios\n      .post(\"http://localhost:4000/new_message\", { text: message, username })\n      .then((res) => {\n        setMessage(\"\");\n      })\n      .catch((error) => {\n        console.log(\"error sending message:\", error);\n        toast({\n          title: \"Error sending\",\n          description: error.message,\n          status: \"error\",\n          duration: 9000,\n          isClosable: true,\n        });\n      })\n      .finally(() => setIsSending(false));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Stack direction=\"row\" bg=\"gray.100\" mt=\"5\">\n        <Input\n          name=\"message\"\n          placeholder=\"Enter a message\"\n          onChange={(e) => setMessage(e.target.value)}\n          value={message}\n          bg=\"white\"\n          border=\"none\"\n          autoFocus\n        />\n        <IconButton\n          // variant=\"outline\"\n          colorScheme=\"teal\"\n          aria-label=\"Send\"\n          fontSize=\"20px\"\n          icon={<BiSend />}\n          type=\"submit\"\n          disabled={!message}\n          isLoading={isSending}\n        />\n      </Stack>\n    </form>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nconst AlwaysScrollToBottom = () => {\n  const elementRef = useRef();\n  useEffect(() => elementRef.current.scrollIntoView());\n  return <div ref={elementRef} />;\n};\n\nexport default AlwaysScrollToBottom;\n","import { Box, Grid, GridItem } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport dayjs from \"dayjs\";\n// import localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n// dayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\n\nexport default function Message({ message, isYou }) {\n  return (\n    <Box display=\"grid\" justifyItems={isYou ? \"end\" : \"start\"}>\n      <Grid\n        templateColumns=\"1fr 1fr\"\n        templateRows=\"30px 1fr\"\n        w=\"70%\"\n        px=\"3\"\n        py=\"2\"\n        borderRadius=\"5px\"\n        borderTopLeftRadius={isYou ? \"5px\" : \"0\"}\n        borderTopRightRadius={isYou ? \"0\" : \"5px\"}\n        bg=\"gray.100\"\n        mt=\"5\"\n        position=\"relative\"\n        _after={{\n          position: \"absolute\",\n          content: \"''\",\n          width: 0,\n          height: 0,\n          borderStyle: \"solid\",\n          borderWidth: isYou ? \"0px 0px 10px 10px\" : \"0px 10px 10px 0\",\n          // borderWidth: \"0px 0px 10px 10px\",\n          borderColor: isYou\n            ? \"transparent transparent transparent #EDF2F7\"\n            : \"transparent #EDF2F7 transparent transparent\",\n          top: 0,\n          left: isYou ? \"auto\" : \"-10px\",\n          right: isYou ? \"-10px\" : \"auto\",\n        }}\n      >\n        <GridItem\n          fontWeight=\"500\"\n          fontSize=\"md\"\n          justifySelf=\"start\"\n          colSpan={2}\n          color=\"gray.500\"\n          mb=\"2\"\n        >\n          {isYou ? \"You\" : message.username}\n        </GridItem>\n        <GridItem\n          justifySelf=\"start\"\n          textAlign=\"left\"\n          wordBreak=\"break-word\"\n          fontSize=\"md\"\n        >\n          {message.text}\n        </GridItem>\n        <GridItem fontSize=\"sm\" justifySelf=\"end\" alignSelf=\"end\">\n          {/* {dayjs(message.timestamp).fromNow()} */}\n          {new Date(message.timestamp).toLocaleTimeString()}\n        </GridItem>\n      </Grid>\n    </Box>\n  );\n}\n","import { Alert, Box, Button } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport AlwaysScrollToBottom from \"./AlwaysScrollToBottom\";\nimport Message from \"./Message\";\n\nexport default function Messages({ username }) {\n  const [messages, setMessages] = useState([]);\n  const [hasStreamError, setHasStreamError] = useState(false);\n  let stream = null;\n  const connectToStream = () => {\n    console.log(\"called connectToStream()\");\n    setHasStreamError(false);\n    if (!!window.EventSource) {\n      console.log(\"connecting to source\");\n      stream = new EventSource(\"http://localhost:4000/stream\");\n\n      stream.onopen = function () {\n        console.log(\"Connection was opened\");\n      };\n\n      stream.addEventListener(\n        \"connected\",\n        function (event) {\n          console.log(\"connected event:\", event.data);\n          const data = JSON.parse(event.data);\n          setMessages(data);\n        },\n        false\n      );\n      stream.addEventListener(\"new_message\", function (event) {\n        const data = JSON.parse(event.data);\n        console.log(\"new_message event:\", data);\n        setMessages(data);\n      });\n      stream.onmessage = function (event) {\n        const data = JSON.parse(event.data);\n        console.log(\"message event:\", data);\n        setMessages(data);\n      };\n\n      stream.onerror = function (error) {\n        console.log(\"Stream error:\", error);\n        if (error.currentTarget.readyState === 0) {\n          // stream = null;\n          setHasStreamError(true);\n          stream.close();\n          console.log(\"Connection was closed\");\n        }\n      };\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"effect ran\");\n    connectToStream();\n    return () => {\n      stream && stream.close();\n      console.log(\"Connection was closed by useEffect unmount\");\n    };\n  }, []);\n\n  // if (messages.length) {\n  //   return messages.map((message, index) => {\n  //     const isYou = message.username === username;\n  //     return (\n  //       <div key={index}>\n  //         <Message message={message} isYou={isYou} />\n  //         <AlwaysScrollToBottom />\n  //       </div>\n  //     );\n  //   });\n  // }\n\n  return (\n    <>\n      {messages.length ? (\n        messages.map((message, index) => {\n          const isYou = message.username === username;\n          return (\n            <div key={index}>\n              <Message message={message} isYou={isYou} />\n              <AlwaysScrollToBottom />\n            </div>\n          );\n        })\n      ) : (\n        <Box as=\"h3\" textAlign=\"center\">\n          No messages 😞\n        </Box>\n      )}\n      {hasStreamError && (\n        <Alert status=\"error\" mt=\"20px\">\n          Disconnected from server\n          <Button\n            ml=\"5px\"\n            onClick={connectToStream}\n            colorScheme=\"red\"\n            variant=\"link\"\n          >\n            try to reconnect\n          </Button>\n        </Alert>\n      )}\n    </>\n  );\n  // return (\n  //   <Box\n  //     // mt=\"4\"\n  //     bg=\"white\"\n  //     p=\"5\"\n  //     // height=\"md\"\n  //     // height=\"26rem\"\n  //     // height=\"100%\"\n  //     overflow=\"auto\"\n  //     borderRadius=\"10px\"\n  //   >\n  //     {messages.length\n  //       ? messages.map((message, index) => {\n  //           const isYou = message.username === username;\n  //           return <Message key={index} message={message} isYou={isYou} />;\n  //         })\n  //       : \"No messages\"}\n  //     <AlwaysScrollToBottom />\n  //   </Box>\n  // );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Input, Stack, IconButton } from \"@chakra-ui/react\";\nimport { BiSave, BiEdit } from \"react-icons/bi\";\n\nexport default function NameForm({ username, setUsername }) {\n  const [newUsername, setNewUsername] = useState(username);\n  const [isEditing, setIsEditing] = useState(false);\n  const toggleEditing = () => {\n    setIsEditing(!isEditing);\n  };\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (isEditing) {\n      inputRef.current.focus();\n    }\n  }, [isEditing]);\n  useEffect(() => {\n    setNewUsername(username);\n  }, [username]);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    toggleEditing();\n\n    if (!newUsername) {\n      setNewUsername(username);\n      return;\n    }\n    // setUsername(newUsername);\n    // setIsEditing(false);\n\n    setUsername(newUsername);\n    localStorage.setItem(\"username\", newUsername);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Stack direction=\"row\">\n        {isEditing ? (\n          <Input\n            name=\"username\"\n            placeholder=\"Choose a username\"\n            onChange={(e) => setNewUsername(e.target.value)}\n            value={newUsername}\n            bg=\"gray.100\"\n            size=\"sm\"\n            border=\"none\"\n            onBlur={handleSubmit}\n            ref={inputRef}\n          />\n        ) : (\n          <span onClick={toggleEditing} style={{ cursor: \"pointer\" }}>\n            Welcome <strong>{newUsername}</strong>\n          </span>\n        )}\n        <IconButton\n          size=\"sm\"\n          pb=\"3px\"\n          variant=\"outline\"\n          colorScheme=\"teal\"\n          aria-label=\"Save\"\n          fontSize=\"15px\"\n          icon={isEditing ? <BiSave /> : <BiEdit />}\n          // type=\"submit\"\n          border=\"none\"\n          onClick={(e) => {\n            if (isEditing) {\n              handleSubmit(e);\n            } else toggleEditing();\n          }}\n        />\n      </Stack>\n    </form>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  ChakraProvider,\n  Box,\n  Grid,\n  theme,\n  Container,\n  Image,\n  GridItem,\n} from \"@chakra-ui/react\";\n// import { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport MessageForm from \"./MessageForm\";\nimport Messages from \"./Messages\";\nimport \"./App.css\";\nimport NameForm from \"./NameForm\";\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  useEffect(() => {\n    const localName = localStorage.getItem(\"username\");\n    console.log(\"localName :>> \", localName);\n    setUsername(localName || \"Guest\");\n  }, []);\n\n  return (\n    <ChakraProvider theme={theme}>\n      {/* <ColorModeSwitcher justifySelf=\"flex-end\" /> */}\n      <Grid minH=\"100vh\" templateRows=\"min-content auto\">\n        <Grid templateColumns=\"1fr 1fr\" justifyItems=\"center\">\n          <GridItem justifySelf=\"start\" m=\"2\">\n            <Image src=\"/rchat_logo.png\" height=\"60px\" />\n          </GridItem>\n          <GridItem justifySelf=\"end\" alignSelf=\"center\" mr=\"5\">\n            <NameForm username={username} setUsername={setUsername} />\n          </GridItem>\n        </Grid>\n        <Box bg=\"gray.100\">\n          <Container\n            maxW=\"600px\"\n            mt=\"5\"\n            display=\"grid\"\n            gridTemplateRows=\"1fr 60px\"\n            height=\"96%\"\n            pb=\"12px\"\n          >\n            <Box bg=\"white\" p=\"5\" overflow=\"auto\" borderRadius=\"10px\">\n              <Messages username={username} />\n            </Box>\n            <MessageForm username={username} />\n          </Container>\n        </Box>\n      </Grid>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n\n{\n  /* <VStack spacing={8}>\n            <Logo h=\"40vmin\" pointerEvents=\"none\" />\n            <Text>\n              Edit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\n            </Text>\n            <Link\n              color=\"teal.500\"\n              href=\"https://chakra-ui.com\"\n              fontSize=\"2xl\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn Chakra\n            </Link>\n          </VStack> */\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}